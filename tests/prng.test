source [file join [file dirname [info script]] common.tcl]

test rng-1.1 {rng_bytes} -body { #<<<
	string length [tomcrypt::rng_bytes 2]
} -result 2
#>>>
test rng-1.1 {rng_bytes, too new args} -body { #<<<
	tomcrypt::rng_bytes
} -result {wrong # args: should be "tomcrypt::rng_bytes count"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test rng-1.2 {rng_bytes, too many args} -body { #<<<
	tomcrypt::rng_bytes a b
} -result {wrong # args: should be "tomcrypt::rng_bytes count"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test rng-1.3 {rng_bytes, not an integer} -body { #<<<
	tomcrypt::rng_bytes a
} -result {expected integer but got "a"} -returnCodes error -errorCode {TCL VALUE NUMBER}
#>>>
test rng-1.4 {rng_bytes, not an integer} -body { #<<<
	tomcrypt::rng_bytes 1.5
} -result {expected integer but got "1.5"} -returnCodes error -errorCode {TCL VALUE NUMBER}
#>>>
test rng-1.5 {rng_bytes, negative count} -body { #<<<
	tomcrypt::rng_bytes -1
} -result {count cannot be negative} -returnCodes error -errorCode {TOMCRYPT VALUE}
#>>>
test rng-1.6 {rng_bytes, zero count} -body { # Should this be an error? <<<
	tomcrypt::rng_bytes 0
} -result {}
#>>>
test rng-1.7 {rng_bytes, is bytearray} -constraints testMode -body { #<<<
	tomcrypt::_testmode_isByteArray [tomcrypt::rng_bytes 1]
} -result 1
#>>>

# fake entropy to prevent the tests (which create and destroy a lot of PRNGs in
# quick succession) from depleting the system entropy pool too much
set fake_entropy		[string repeat a 40]
test prng-1.1 {prng create} -body { #<<<
	tomcrypt::prng create prng-1.1 fortuna
	info commands prng-1.1
} -cleanup {
	if {[llength [info commands prng-1.1]]} {
		rename prng-1.1 {}
	}
} -result prng-1.1
#>>>
test prng-1.2 {prng new} -body { #<<<
	set prng	[tomcrypt::prng new fortuna]
	llength [info commands $prng]
} -cleanup {
	if {[info exists prng] && [llength [info commands $prng]]} {
		rename $prng {}
	}
	unset -nocomplain prng
} -result 1
#>>>
test prng-1.3 {prng create, entropy provided} -body { #<<<
	tomcrypt::prng create prng-1.3 fortuna $fake_entropy
	info commands prng-1.3
} -cleanup {
	if {[llength [info commands prng-1.3]]} {
		rename prng-1.3 {}
	}
} -result prng-1.3
#>>>
test prng-1.4 {prng create, entropy provided} -body { #<<<
	tomcrypt::prng create prng-1.4 fortuna $fake_entropy
	info commands prng-1.4
} -cleanup {
	if {[llength [info commands prng-1.4]]} {
		rename prng-1.4 {}
	}
} -result prng-1.4
#>>>
test prng-1.4.1 {prng create, bad entropy provided} -constraints hasGetBytesFromObj -body { #<<<
	set testname	prng-1.4.1
	tomcrypt::prng create $testname fortuna $fake_entropy\u306f
} -cleanup {
	if {[llength [info commands $testname]]} {
		rename $testname {}
	}
} -result "expected byte sequence but character 40 was '\u306f' (U+00306F)" -returnCodes error -errorCode {TCL VALUE BYTES}
#>>>
test prng-1.5 {prng explicit destroy} -body { #<<<
	set testname prng-1.5
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname destroy
	llength [info commands $testname]
} -cleanup {
	if {[llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result 0
#>>>
test prng-1.6 {prng create, too few args} -body { # Should this form be allowed, and use all defaults? <<<
	set testname prng-1.6
	tomcrypt::prng create $testname
} -cleanup {
	if {[llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {wrong # args: should be "tomcrypt::prng create prng-1.6 type ?entropy?"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test prng-1.7 {prng create, too many args} -body { #<<<
	set testname prng-1.7
	tomcrypt::prng create $testname fortuna $fake_entropy a
} -cleanup {
	if {[llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {wrong # args: should be "tomcrypt::prng create prng-1.7 type ?entropy?"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test prng-1.8 {prng create, auto-pick implementation} -body { #<<<
	set testname prng-1.8
	tomcrypt::prng create $testname {} $fake_entropy
	llength [info commands $testname]
} -cleanup {
	if {[llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result 1
#>>>
test prng-2.1 {prng bad implementation} -body { #<<<
	set prng	[tomcrypt::prng new nonesuch $fake_entropy]
} -cleanup {
	if {[info exists prng] && [llength [info commands $prng]]} {
		rename $prng {}
	}
	unset -nocomplain prng
} -result {PRNG implementation "nonesuch" not registered} -returnCodes error -errorCode {TOMCRYPT UNREGISTERED PRNG nonesuch}
#>>>
test prng-2.2 {too little entropy supplied} -body { #<<<
	set prng	[tomcrypt::prng new fortuna [string repeat a 7]]
} -cleanup {
	if {[info exists prng] && [llength [info commands $prng]]} {
		rename $prng {}
	}
	unset -nocomplain prng
} -result {insufficient entropy supplied} -returnCodes error -errorCode {TOMCRYPT VALUE}
#>>>
test prng-3.1 {prng bytes} -body { #<<<
	set prng	[tomcrypt::prng new fortuna $fake_entropy]
	string length [$prng bytes 3]
} -cleanup {
	if {[info exists prng] && [llength [info commands $prng]]} {
		rename $prng {}
	}
	unset -nocomplain prng
} -result 3
#>>>
test prng-3.2 {prng bytes, is bytearray} -constraints testMode -body { #<<<
	set prng	[tomcrypt::prng new fortuna $fake_entropy]
	tomcrypt::_testmode_isByteArray [$prng bytes 3]
} -cleanup {
	if {[info exists prng] && [llength [info commands $prng]]} {
		rename $prng {}
	}
	unset -nocomplain prng
} -result 1
#>>>
test prng-3.3 {prng bytes, too few args} -body { #<<<
	set testname	prng-3.3
	tomcrypt::prng create $testname fortuna $fake_entropy]
	$testname bytes
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {wrong # args: should be "prng-3.3 bytes count"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test prng-3.4 {prng bytes, too many args} -body { #<<<
	set testname	prng-3.4
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname bytes 3 4
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {wrong # args: should be "prng-3.4 bytes count"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test prng-3.5 {prng bytes, not an integer} -body { #<<<
	set prng	[tomcrypt::prng new fortuna $fake_entropy]
	$prng bytes a
} -cleanup {
	if {[info exists prng] && [llength [info commands $prng]]} {
		rename $prng {}
	}
	unset -nocomplain prng
} -result {expected integer but got "a"} -returnCodes error -errorCode {TCL VALUE NUMBER}
#>>>
test prng-3.6 {prng bytes, not an integer} -body { #<<<
	set prng	[tomcrypt::prng new fortuna $fake_entropy]
	$prng bytes 1.5
} -cleanup {
	if {[info exists prng] && [llength [info commands $prng]]} {
		rename $prng {}
	}
	unset -nocomplain prng
} -result {expected integer but got "1.5"} -returnCodes error -errorCode {TCL VALUE NUMBER}
#>>>
test prng-3.7 {prng bytes, negative count} -body { #<<<
	set prng	[tomcrypt::prng new fortuna $fake_entropy]
	$prng bytes -1
} -cleanup {
	if {[info exists prng] && [llength [info commands $prng]]} {
		rename $prng {}
	}
	unset -nocomplain prng
} -result {count cannot be negative} -returnCodes error -errorCode {TOMCRYPT VALUE}
#>>>
test prng-3.8 {prng bytes, zero count} -body { # Should this be an error? <<<
	set prng	[tomcrypt::prng new fortuna $fake_entropy]
	$prng bytes 0
} -cleanup {
	if {[info exists prng] && [llength [info commands $prng]]} {
		rename $prng {}
	}
	unset -nocomplain prng
} -result {}
#>>>
test prng-4.1 {prng add_entropy} -body { #<<<
	set prng	[tomcrypt::prng new fortuna $fake_entropy]
	$prng add_entropy [string repeat b 8]
} -cleanup {
	if {[info exists prng] && [llength [info commands $prng]]} {
		rename $prng {}
	}
	unset -nocomplain prng
} -result {}
#>>>
test prng-4.2 {prng add_entropy, too few args} -body { #<<<
	set testname	prng-4.2
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname add_entropy
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {wrong # args: should be "prng-4.2 add_entropy entropy"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test prng-4.3 {prng add_entropy, too many args} -body { #<<<
	set testname	prng-4.3
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname add_entropy a b
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {wrong # args: should be "prng-4.3 add_entropy entropy"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test prng-4.4 {prng add_entropy, not a bytearray} -constraints hasGetBytesFromObj -body { #<<<
	set testname	prng-4.4
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname add_entropy \u306f
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result "expected byte sequence but character 0 was '\u306f' (U+00306F)" -returnCodes error -errorCode {TCL VALUE BYTES}
#>>>
test prng-4.5 {prng add_entropy, zero bytes} -body { # Should this be an error? <<<
	set prng	[tomcrypt::prng new fortuna $fake_entropy]
	$prng add_entropy {}
} -cleanup {
	if {[info exists prng] && [llength [info commands $prng]]} {
		rename $prng {}
	}
	unset -nocomplain prng
} -result {}
#>>>
test prng-5.1 {prng integer} -body { #<<<
	set testname	prng-5.2
	tomcrypt::prng create $testname fortuna $fake_entropy
	tcl::mathop::<= 1000 [$testname integer 1000 1234] 1234
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result 1
#>>>
test prng-5.2 {prng integer, too few args} -body { #<<<
	set testname	prng-5.2
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname integer 0
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {wrong # args: should be "prng-5.2 integer lower upper"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test prng-5.3 {prng integer, too many args} -body { #<<<
	set testname	prng-5.3
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname integer 0 1 2
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {wrong # args: should be "prng-5.3 integer lower upper"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test prng-5.4 {prng integer, lower not an integer} -body { #<<<
	set testname	prng-5.4
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname integer a 10
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {expected number but got "a"} -returnCodes error -errorCode {TCL VALUE NUMBER}
#>>>
test prng-5.5 {prng integer, lower not an integer} -body { #<<<
	set testname	prng-5.5
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname integer 1.5 10
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {expected integer but got "1.5"} -returnCodes error -errorCode {TCL VALUE NUMBER}
#>>>
test prng-5.6 {prng integer, upper not an integer} -body { #<<<
	set testname	prng-5.6
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname integer 1 a
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {expected number but got "a"} -returnCodes error -errorCode {TCL VALUE NUMBER}
#>>>
test prng-5.7 {prng integer, upper not an integer} -body { #<<<
	set testname	prng-5.7
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname integer 1 1.5
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {expected integer but got "1.5"} -returnCodes error -errorCode {TCL VALUE NUMBER}
#>>>
test prng-5.8 {prng integer, lower greater than upper} -body { #<<<
	set testname	prng-5.8
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname integer 10 1
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {lower must be less than or equal to upper} -returnCodes error -errorCode {TOMCRYPT VALUE}
#>>>
test prng-5.9 {prng integer, negative} -body { #<<<
	set testname	prng-5.9
	tomcrypt::prng create $testname fortuna $fake_entropy
	tcl::mathop::<= -10 [$testname integer -10 -4] -4
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result 1
#>>>
test prng-5.10 {prng integer, large (bignum)} -body { #<<<
	set testname	prng-5.10
	tomcrypt::prng create $testname fortuna $fake_entropy
	tcl::mathop::<= 0 [$testname integer 0 [expr {2**256-1}]] [expr {2**256-1}]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result 1
#>>>
test prng-5.11 {prng integer, large (bignum)} -body { #<<<
	set testname	prng-5.11
	tomcrypt::prng create $testname fortuna $fake_entropy
	tcl::mathop::<= [expr {2**256-1}] [$testname integer [expr {2**256-1}] [expr {2**512-1}]] [expr {2**512-1}]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result 1
#>>>
test prng-5.12 {prng integer, zero range} -body { #<<<
	set testname	prng-5.12
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname integer 42 42
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
} -result 42
#>>>
test prng-5.13 {prng integer, zero range (bignum)} -body { #<<<
	set testname	prng-5.13
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname integer [expr {2**256}] [expr {2**256}]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result [expr {2**256}]
#>>>
test prng-5.14 {prng integer, probable exercise of failed roll case} -body { #<<<
	set testname	prng-5.14
	tomcrypt::prng create $testname fortuna $fake_entropy
	for {set i 0} {$i < 100} {incr i} {
		if {![tcl::mathop::<= 0 [$testname integer 0 32] 32]} {
			error "value out of range"
		}
	}
	set i
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain i testname
} -result 100
#>>>
test prng-5.15.0 {prng integer, large (bignum), mask 0} -body { #<<<
	set testname	prng-5.15.0
	tomcrypt::prng create $testname fortuna $fake_entropy
	tcl::mathop::<= 0 [$testname integer 0 [expr {2**256-1}]] [expr {2**256-1}]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result 1
#>>>
test prng-5.15.1 {prng integer, large (bignum), mask 1} -body { #<<<
	set testname	prng-5.15.1
	tomcrypt::prng create $testname fortuna xx$fake_entropy		;# Tuned to trigger the reroll case
	tcl::mathop::<= 0 [$testname integer 0 [expr {2**256}]] [expr {2**256}]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result 1
#>>>
test prng-5.15.7 {prng integer, large (bignum), mask 7} -body { #<<<
	set testname	prng-5.15.7
	tomcrypt::prng create $testname fortuna $fake_entropy
	tcl::mathop::<= 0 [$testname integer 0 [expr {2**263-1}]] [expr {2**263-1}]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result 1
#>>>
test prng-5.16 {prng integer, lower greater than upper (bignum)} -body { #<<<
	set testname	prng-5.16
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname integer [expr {2**256}] [expr {2**256-1}]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {lower must be less than or equal to upper} -returnCodes error -errorCode {TOMCRYPT VALUE}
#>>>
test prng-5.17 {prng integer, bignum use after} -body { #<<<
	set testname	prng-5.18
	tomcrypt::prng create $testname fortuna $fake_entropy
	set lower		[expr {2**256-1}]
	$testname integer $lower [expr {2**259-42}]
	expr {$lower+1}
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname lower
} -result [expr {2**256}]
#>>>
test prng-5.18 {prng integer [0,2**31]} -body { #<<<
	set testname	prng-5.18
	tomcrypt::prng create $testname fortuna $fake_entropy
	set v	[$testname integer 0 [expr {2**31}]]
	list [tcl::mathop::<= 0 $v [expr {2**31}]] [tcl::mathop::<= 0.001 [expr {$v / double(2**31)}] 0.999]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname v
} -result {1 1}
#>>>
test prng-6.1 {prng double} -body { #<<<
	set testname	prng-6.1
	tomcrypt::prng create $testname fortuna $fake_entropy
	set val	[$testname double]
	expr {$val >= 0 && $val < 1}
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname val
} -result 1
#>>>
test prng-6.2 {prng double, too many args} -body { #<<<
	set testname	prng-6.2
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname double a
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {wrong # args: should be "prng-6.2 double"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test prng-6.3 {prng double, uniform distribution} -constraints testMode -setup { #<<<
	set testname	prng-6.3

	proc examine cmd {
		set it		1000000
		set bit		-5
		set hist	[tomcrypt::_testmode_doubleMantissaHist $cmd $it]
		set bits	[llength $hist]
		set format	"%3d: %[expr {1+int(ceil(log($it)/log(10)))}]d %f"
		join [lreverse [lmap bitcount $hist {
			format $format [incr bit] $bitcount [expr {$bitcount/double($it)}]
		}]] \n
	}

	tomcrypt::prng create $testname chacha20 $fake_entropy
} -body {
	examine [list $testname double]
	#examine "expr {(\"0x\[binary encode hex \[[list $testname] bytes 8\]\]\" & (2**53-1))/double(2**53)}"	;# Should be equivalent to the above
	#examine {expr {rand()*2}}
	#examine "expr {\[[list $testname] integer 0 \[expr {2**53-1}]\]/double(2**53)}"
	#examine "expr {\[[list $testname] integer 0 \[expr {2**32-1}]\]/double(2**32)}"
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	rename examine {}
	unset -nocomplain testname
} -result [string trim {
 59:       0 0.000000
 58:       0 0.000000
 57:       0 0.000000
 56:       0 0.000000
 55:       0 0.000000
 54:       0 0.000000
 53:       0 0.000000
 52:  500174 0.500174
 51:  499421 0.499421
 50:  499732 0.499732
 49:  499758 0.499758
 48:  499841 0.499841
 47:  500234 0.500234
 46:  500397 0.500397
 45:  500670 0.500670
 44:  500126 0.500126
 43:  499610 0.499610
 42:  499796 0.499796
 41:  500652 0.500652
 40:  499746 0.499746
 39:  500173 0.500173
 38:  499560 0.499560
 37:  500802 0.500802
 36:  499644 0.499644
 35:  499826 0.499826
 34:  500709 0.500709
 33:  499598 0.499598
 32:  500034 0.500034
 31:  500062 0.500062
 30:  500530 0.500530
 29:  500184 0.500184
 28:  500377 0.500377
 27:  500290 0.500290
 26:  499219 0.499219
 25:  499433 0.499433
 24:  500232 0.500232
 23:  498672 0.498672
 22:  500157 0.500157
 21:  500018 0.500018
 20:  499348 0.499348
 19:  499872 0.499872
 18:  500088 0.500088
 17:  500800 0.500800
 16:  499663 0.499663
 15:  499294 0.499294
 14:  499662 0.499662
 13:  500599 0.500599
 12:  500730 0.500730
 11:  499599 0.499599
 10:  500351 0.500351
  9:  500728 0.500728
  8:  498759 0.498759
  7:  499987 0.499987
  6:  500254 0.500254
  5:  499113 0.499113
  4:  499330 0.499330
  3:  499692 0.499692
  2:  499821 0.499821
  1:  500224 0.500224
  0:  500554 0.500554
 -1:       0 0.000000
 -2:       0 0.000000
 -3:       0 0.000000
 -4:       0 0.000000
} \n]
#>>>
test prng-7.1 {prng export} -body { #<<<
	set testname	prng-7.1
	tomcrypt::prng create $testname fortuna $fake_entropy
	expr {[string length [$testname export]] >= 8}
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result 1
#>>>
test prng-7.2 {prng export, too many args} -body { #<<<
	set testname	prng-7.2
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname export a
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result {wrong # args: should be "prng-7.2 export"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test prng-7.3 {prng export is bytearray} -constraints testMode -body { #<<<
	set testname	prng-7.3
	tomcrypt::prng create $testname fortuna $fake_entropy
	tomcrypt::_testmode_isByteArray [$testname export]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result 1
#>>>
test prng-7.4 {prng export accepted by new prng} -body { #<<<
	set testname	prng-7.4
	tomcrypt::prng create $testname fortuna $fake_entropy
	set export	[$testname export]
	set prng	[tomcrypt::prng new fortuna $export]
	string length [$prng bytes 3]
} -cleanup {
	foreach v {testname prng} {
		if {[info exists $v] && [llength [info commands [set $v]]]} {
			rename [set $v] {}
		}
		unset -nocomplain $v
	}
	unset -nocomplain export v
} -result 3
#>>>
test prng-7.5 {prng export, still functioning} -body { #<<<
	set testname	prng-7.5
	tomcrypt::prng create $testname fortuna $fake_entropy
	$testname export
	string length [$testname bytes 3]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
	unset -nocomplain testname
} -result 3
#>>>
test prng-8.1 {prng implementation: chacha20} -body { #<<<
	set testname	prng-8.1
	tomcrypt::prng create $testname chacha20 $fake_entropy
	string length [$testname bytes 3]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
} -result 3
#>>>
test prng-8.2 {prng implementation: fortuna} -body { #<<<
	set testname	prng-8.2
	tomcrypt::prng create $testname fortuna $fake_entropy
	string length [$testname bytes 3]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
} -result 3
#>>>
test prng-8.3 {prng implementation: rc4} -body { #<<<
	set testname	prng-8.3
	tomcrypt::prng create $testname rc4 $fake_entropy
	string length [$testname bytes 3]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
} -result 3
#>>>
test prng-8.4 {prng implementation: sober128} -body { #<<<
	set testname	prng-8.4
	tomcrypt::prng create $testname sober128 $fake_entropy
	string length [$testname bytes 3]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
} -result 3
#>>>
test prng-8.5 {prng implementation: yarrow} -body { #<<<
	set testname	prng-8.5
	tomcrypt::prng create $testname yarrow $fake_entropy
	string length [$testname bytes 3]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
} -result 3
#>>>
test prng-8.6 {prng implementation: sprng} -body { #<<<
	set testname	prng-8.6
	tomcrypt::prng create $testname sprng $fake_entropy
	string length [$testname bytes 3]
} -cleanup {
	if {[info exists testname] && [llength [info commands $testname]]} {
		rename $testname {}
	}
} -result 3
#>>>

# Coverage golf:


# cleanup
::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
