source [file join [file dirname [info script]] common.tcl]

test ecc-1.1 {ecc_verify, success} -body { #<<<
	tomcrypt::ecc_verify \
		[binary decode base64 MEUCIQDr/iC/fbEVKDydJ6/Jw95f53b6SGOXo7dMQtVGR48lMQIgeSKKZOph5MMqqj1p/e8NIgIghAe6AoNXir8D6NVwMOo=] \
		[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda] \
		[string range [binary decode base64 MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbdyQug/XnFO9cAYBkiEWMdEexYEwLpHDVZ30sgzfdH29h4WijDC3Zua0MyV0nvcKkj0Ad/vFPLy7IQ3hR8VA4A==] 26 end]
} -result 1
#>>>
test ecc-2.1 {ecc_verify, fail} -body { #<<<
	tomcrypt::ecc_verify \
		[binary decode base64 MEUCIQDr/iC/fbEVKDydJ6/Jw95f53b6SGOXo7dMQtVGR48lMQIgeSKKZOph5MMqqj1p/e8NIgIghAe6AoNXir8D6NVwMOo=] \
		[binary decode hex 51091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda] \
		[string range [binary decode base64 MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbdyQug/XnFO9cAYBkiEWMdEexYEwLpHDVZ30sgzfdH29h4WijDC3Zua0MyV0nvcKkj0Ad/vFPLy7IQ3hR8VA4A==] 26 end]
} -result 0
#>>>

test ecc-format-1.0 "Valid X9.63 public key import" -setup { #<<<
    set pubkey [binary decode base64 "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbdyQug/XnFO9cAYBkiEWMdEexYEwLpHDVZ30sgzfdH29h4WijDC3Zua0MyV0nvcKkj0Ad/vFPLy7IQ3hR8VA4A=="]
} -body {
    tomcrypt::ecc_verify \
        [binary decode base64 "MEUCIQDr/iC/fbEVKDydJ6/Jw95f53b6SGOXo7dMQtVGR48lMQIgeSKKZOph5MMqqj1p/e8NIgIghAe6AoNXir8D6NVwMOo="] \
        [binary decode hex "41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda"] \
        [string range $pubkey 26 end]
} -cleanup {
	unset -nocomplain pubkey
} -result 1
#>>>
test ecc-format-1.1 "Invalid X9.63 public key format" -setup { #<<<
    # Corrupted first byte (should be 0x04)
    set pubkey [binary decode base64 "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAFbdyQug/XnFO9cAYBkiEWMdEexYEwLpHDVZ30sgzfdH29h4WijDC3Zua0MyV0nvcKkj0Ad/vFPLy7IQ3hR8VA4A=="]
} -body {
    tomcrypt::ecc_verify "" "" [string range $pubkey 26 end]
} -cleanup {
	unset -nocomplain pubkey
} -returnCodes error -result "Invalid X9.63 format key"
#>>>
test ecc-format-2.0 "Valid private key import" -setup { #<<<
    # Generate a test key pair first
    tomcrypt::prng create rng fortuna
    lassign [tomcrypt::ecc_make_key rng 32] privkey pubkey

    # Now verify we can use it for signing
    set msg [binary decode hex "0123456789abcdef"]
} -body {
    set sig [tomcrypt::ecc_sign $privkey $msg]
    tomcrypt::ecc_verify $sig $msg $pubkey
} -cleanup {
	unset -nocomplain privkey pubkey msg sig
	catch {rename rng {}}
} -result 1
#>>>
test ecc-format-2.1 "Invalid private key format" -setup { #<<<
    tomcrypt::prng create rng fortuna
    lassign [tomcrypt::ecc_make_key rng 32] privkey pubkey
    # Modify the private key flag in the DER structure
    binary scan $privkey H* hex
    set corrupted_hex [string replace $hex 8 11 "0700"]
    set corrupted_key [binary format H* $corrupted_hex]
} -body {
    tomcrypt::ecc_sign $corrupted_key "test"
} -cleanup {
    unset -nocomplain privkey pubkey hex corrupted_hex corrupted_key
    catch {rename rng {}}
} -returnCodes error -result "Invalid private key format"
#>>>
test ecc-format-3.0 "Completely invalid key format" -body { #<<<
    tomcrypt::ecc_sign "not a key at all" "test"
} -returnCodes error -result {Invalid private key format}
#>>>
test ecc-format-4.0 "Key pair round trip" -setup { #<<<
    # Test that a generated key pair works for sign/verify
    tomcrypt::prng create rng fortuna
    lassign [tomcrypt::ecc_make_key rng 32] privkey pubkey
    set msg "test message"
} -body {
    set sig [tomcrypt::ecc_sign $privkey $msg]
    tomcrypt::ecc_verify $sig $msg $pubkey
} -cleanup {
	unset -nocomplain privkey pubkey msg sig
	catch {rename rng {}}
} -result 1
#>>>

# Coverage golf:
test ecc-10.1 {GetECCKeyFromObj, existing key intrep} -setup { #<<<
	set key	[string range [binary decode base64 MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbdyQug/XnFO9cAYBkiEWMdEexYEwLpHDVZ30sgzfdH29h4WijDC3Zua0MyV0nvcKkj0Ad/vFPLy7IQ3hR8VA4A==] 26 end]
} -body {
	tomcrypt::ecc_verify \
		[binary decode base64 MEUCIQDr/iC/fbEVKDydJ6/Jw95f53b6SGOXo7dMQtVGR48lMQIgeSKKZOph5MMqqj1p/e8NIgIghAe6AoNXir8D6NVwMOo=] \
		[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda] \
		$key
	tomcrypt::ecc_verify \
		[binary decode base64 MEUCIQDr/iC/fbEVKDydJ6/Jw95f53b6SGOXo7dMQtVGR48lMQIgeSKKZOph5MMqqj1p/e8NIgIghAe6AoNXir8D6NVwMOo=] \
		[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda] \
		$key
} -cleanup {
	unset -nocomplain key
} -result 1
#>>>
test ecc-10.2 {GetECCKeyFromObj, bad key} -body { #<<<
	tomcrypt::ecc_verify \
		[binary decode base64 MEUCIQDr/iC/fbEVKDydJ6/Jw95f53b6SGOXo7dMQtVGR48lMQIgeSKKZOph5MMqqj1p/e8NIgIghAe6AoNXir8D6NVwMOo=] \
		[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda] \
		[binary decode base64 MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbdyQug/XnFO9cAYBkiEWMdEexYEwLpHDVZ30sgzfdH29h4WijDC3Zua0MyV0nvcKkj0Ad/vFPLy7IQ3hR8VA4A==]
} -result {Invalid X9.63 format key} -returnCodes error -errorCode {TOMCRYPT FORMAT X963}
#>>>
test ecc-10.3 {ecc_verify: too few args} -body { #<<<
	tomcrypt::ecc_verify a b
} -result {wrong # args: should be "tomcrypt::ecc_verify sig message key"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test ecc-10.4 {ecc_verify: too many args} -body { #<<<
	tomcrypt::ecc_verify a b c d
} -result {wrong # args: should be "tomcrypt::ecc_verify sig message key"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test ecc-10.5 {ecc_verify, bad sig} -body { #<<<
	tomcrypt::ecc_verify \
		[string range [binary decode base64 MEUCIQDr/iC/fbEVKDydJ6/Jw95f53b6SGOXo7dMQtVGR48lMQIgeSKKZOph5MMqqj1p/e8NIgIghAe6AoNXir8D6NVwMOo=] 1 end] \
		[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda] \
		[string range [binary decode base64 MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbdyQug/XnFO9cAYBkiEWMdEexYEwLpHDVZ30sgzfdH29h4WijDC3Zua0MyV0nvcKkj0Ad/vFPLy7IQ3hR8VA4A==] 26 end]
} -result {ecc_verify_hash failed: Invalid input packet.} -returnCodes error -errorCode {TOMCRYPT FORMAT}
#>>>
test ecc-10.6 {ecc_verify, sig not bytes} -body { #<<<
	tomcrypt::ecc_verify \
		\u306f \
		[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda] \
		[string range [binary decode base64 MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbdyQug/XnFO9cAYBkiEWMdEexYEwLpHDVZ30sgzfdH29h4WijDC3Zua0MyV0nvcKkj0Ad/vFPLy7IQ3hR8VA4A==] 26 end]
} -result "expected byte sequence but character 0 was '\u306f' (U+00306F)" -returnCodes error -errorCode {TCL VALUE BYTES}
#>>>
test ecc-10.7 {ecc_verify, message not bytes} -body { #<<<
	tomcrypt::ecc_verify \
		[string range [binary decode base64 MEUCIQDr/iC/fbEVKDydJ6/Jw95f53b6SGOXo7dMQtVGR48lMQIgeSKKZOph5MMqqj1p/e8NIgIghAe6AoNXir8D6NVwMOo=] 1 end] \
		\u306f \
		[string range [binary decode base64 MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbdyQug/XnFO9cAYBkiEWMdEexYEwLpHDVZ30sgzfdH29h4WijDC3Zua0MyV0nvcKkj0Ad/vFPLy7IQ3hR8VA4A==] 26 end]
} -result "expected byte sequence but character 0 was '\u306f' (U+00306F)" -returnCodes error -errorCode {TCL VALUE BYTES}
#>>>
test ecc-10.8 {orphan an ecc_key intrep} -constraints testMode -body { #<<<
	tomcrypt::ecc_verify \
		[binary decode base64 MEUCIQDr/iC/fbEVKDydJ6/Jw95f53b6SGOXo7dMQtVGR48lMQIgeSKKZOph5MMqqj1p/e8NIgIghAe6AoNXir8D6NVwMOo=] \
		[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda] \
		[tomcrypt::_testmode_leakObj [string range [binary decode base64 MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbdyQug/XnFO9cAYBkiEWMdEexYEwLpHDVZ30sgzfdH29h4WijDC3Zua0MyV0nvcKkj0Ad/vFPLy7IQ3hR8VA4A==] 26 end]]
} -result 1
#>>>
test ecc-10.9 {duplicate ecc_key intrep} -constraints testMode -body { #<<<
	set pbkey	[string range [binary decode base64 MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbdyQug/XnFO9cAYBkiEWMdEexYEwLpHDVZ30sgzfdH29h4WijDC3Zua0MyV0nvcKkj0Ad/vFPLy7IQ3hR8VA4A==] 26 end]
	set res	[tomcrypt::ecc_verify \
		[binary decode base64 MEUCIQDr/iC/fbEVKDydJ6/Jw95f53b6SGOXo7dMQtVGR48lMQIgeSKKZOph5MMqqj1p/e8NIgIghAe6AoNXir8D6NVwMOo=] \
		[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda] \
		$pbkey]
	tomcrypt::_testmode_dupObj $pbkey
	set res
} -cleanup {
	unset -nocomplain pbkey res
} -result 1
#>>>
test ecc-10.10 {child interp} -body { #<<<
	set child	[interp create]
	$child eval {
		load {} tomcrypt
		tomcrypt::ecc_verify \
			[binary decode base64 MEUCIQDr/iC/fbEVKDydJ6/Jw95f53b6SGOXo7dMQtVGR48lMQIgeSKKZOph5MMqqj1p/e8NIgIghAe6AoNXir8D6NVwMOo=] \
			[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda] \
			[string range [binary decode base64 MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbdyQug/XnFO9cAYBkiEWMdEexYEwLpHDVZ30sgzfdH29h4WijDC3Zua0MyV0nvcKkj0Ad/vFPLy7IQ3hR8VA4A==] 26 end]
	}
} -cleanup {
	if {[info exists child]} {
		interp delete $child
	}
	unset -nocomplain child
} -result 1
#>>>

# Basic functionality
test ecc-20.1 {ecc_make_key: basic usage} -setup { #<<<
	tomcrypt::prng create prng fortuna
} -body {
	# Verify we got a two element list
	llength [tomcrypt::ecc_make_key prng 32]
} -cleanup {
	rename prng {}
} -result 2
#>>>
test ecc-20.2 {ecc_make_key: key verification} -setup { #<<<
	tomcrypt::prng create prng fortuna
	set msg		[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda]
} -body {
	lassign [tomcrypt::ecc_make_key prng 32] private_key public_key

	# Sign with private key
	set sig			[tomcrypt::ecc_sign $private_key $msg]
	# Verify with public key
	tomcrypt::ecc_verify $sig $msg $public_key
} -cleanup {
	unset -nocomplain private_key public_key msg sig
	rename prng {}
} -result 1
#>>>
test ecc-20.3 {ecc_make_key: generated key formats} -setup { #<<<
	tomcrypt::prng create prng fortuna
} -body {
	lassign [tomcrypt::ecc_make_key prng 32] private_key public_key

	# Public key should start with 0x04 (uncompressed point format)
	string index $public_key 0
} -cleanup {
	unset -nocomplain private_key public_key
	rename prng {}
} -result \x04
#>>>
# Error cases
test ecc-20.4 {ecc_make_key: too few args} -body { #<<<
	tomcrypt::ecc_make_key
} -result {wrong # args: should be "tomcrypt::ecc_make_key prng keysize"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test ecc-20.5 {ecc_make_key: too many args} -body { #<<<
	tomcrypt::ecc_make_key a b c
} -result {wrong # args: should be "tomcrypt::ecc_make_key prng keysize"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test ecc-20.6 {ecc_make_key: invalid prng object} -body { #<<<
	tomcrypt::ecc_make_key not_a_prng 32
} -result {not_a_prng does not refer to an object} -returnCodes error -errorCode {TOMCRYPT VALUE PRNG}
#>>>
test ecc-20.7 {ecc_make_key: negative keysize} -setup { #<<<
	tomcrypt::prng create prng fortuna
} -body {
	tomcrypt::ecc_make_key prng -1
} -cleanup {
	rename prng {}
} -result {keysize must be positive} -returnCodes error -errorCode {TOMCRYPT VALUE}
#>>>
test ecc-20.8 {ecc_make_key: zero keysize} -setup { #<<<
	tomcrypt::prng create prng fortuna
} -body {
	tomcrypt::ecc_make_key prng 0
} -cleanup {
	rename prng {}
} -result {keysize must be positive} -returnCodes error -errorCode {TOMCRYPT VALUE}
#>>>
test ecc-20.9 {ecc_make_key: keysize not an integer} -setup { #<<<
	tomcrypt::prng create prng fortuna
} -body {
	tomcrypt::ecc_make_key prng badsize
} -cleanup {
	rename prng {}
} -returnCodes error -errorCode {TCL VALUE NUMBER} -match glob -result *
#>>>
# Test with child interp for memory handling
test ecc-20.10 {child interp} -body { #<<<
	set child	[interp create]
	$child eval {
		load {} tomcrypt
		tomcrypt::prng create prng fortuna
		llength [tomcrypt::ecc_make_key prng 32]
	}
} -cleanup {
	if {[info exists child]} {
		interp delete $child
	}
	unset -nocomplain child
} -result 2
#>>>

test ecc-30.1 {ecc_sign: basic usage with default PRNG} -setup { #<<<
	tomcrypt::prng create prng fortuna
	lassign [tomcrypt::ecc_make_key prng 32] private_key public_key
	set msg	[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda]
} -body {
	set sig	[tomcrypt::ecc_sign $private_key $msg]
	tomcrypt::ecc_verify $sig $msg $public_key
} -cleanup {
	rename prng {}
	unset -nocomplain private_key public_key msg sig
} -result 1
#>>>
test ecc-30.2 {ecc_sign: basic usage with supplied PRNG} -setup { #<<<
	tomcrypt::prng create prng fortuna
	lassign [tomcrypt::ecc_make_key prng 32] private_key public_key
	set msg	[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda]
} -body {
	set sig	[tomcrypt::ecc_sign $private_key $msg prng]
	tomcrypt::ecc_verify $sig $msg $public_key
} -cleanup {
	rename prng {}
	unset -nocomplain private_key public_key msg sig
} -result 1
#>>>
test ecc-30.3 {ecc_sign: refuse to sign with public key} -setup { #<<<
	tomcrypt::prng create prng fortuna
	lassign	[tomcrypt::ecc_make_key prng 32] private_key public_key
	set msg	[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda]
} -body {
	tomcrypt::ecc_sign $public_key $msg
} -cleanup {
	rename prng {}
	unset -nocomplain private_key public_key msg
} -result {Invalid private key format} -returnCodes error -errorCode {TOMCRYPT FORMAT PRIVATE}
#>>>
test ecc-30.4 {ecc_sign: too few args} -body { #<<<
	tomcrypt::ecc_sign
} -result {wrong # args: should be "tomcrypt::ecc_sign privkey message ?prng?"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test ecc-30.5 {ecc_sign: too many args} -body { #<<<
	tomcrypt::ecc_sign a b c d
} -result {wrong # args: should be "tomcrypt::ecc_sign privkey message ?prng?"} -returnCodes error -errorCode {TCL WRONGARGS}
#>>>
test ecc-30.6 {ecc_sign: invalid key} -setup { #<<<
	set msg	[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda]
} -body {
	tomcrypt::ecc_sign notakey $msg
} -cleanup {
	unset -nocomplain msg
} -result {Invalid private key format} -returnCodes error -errorCode {TOMCRYPT FORMAT PRIVATE}
#>>>
test ecc-30.7 {ecc_sign: message not bytes} -setup { #<<<
	tomcrypt::prng create prng fortuna
	lassign [tomcrypt::ecc_make_key prng 32] private_key public_key
} -body {
	tomcrypt::ecc_sign $private_key \u306f
} -cleanup {
	rename prng {}
	unset -nocomplain private_key public_key
} -result "expected byte sequence but character 0 was '\u306f' (U+00306F)" -returnCodes error -errorCode {TCL VALUE BYTES}
#>>>
test ecc-30.8 {ecc_sign: invalid PRNG object} -setup { #<<<
	tomcrypt::prng create prng fortuna
	lassign [tomcrypt::ecc_make_key prng 32] private_key public_key
	set msg	[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda]
} -body {
	tomcrypt::ecc_sign $private_key $msg not_a_prng
} -cleanup {
	rename prng {}
	unset -nocomplain keypair private_key public_key msg
} -result {not_a_prng does not refer to an object} -returnCodes error -errorCode {TOMCRYPT VALUE PRNG}
#>>>
# Child interp test for memory handling
test ecc-30.9 {child interp} -body { #<<<
	set child	[interp create]
	$child eval {
		load {} tomcrypt
		tomcrypt::prng create prng fortuna
		lassign [tomcrypt::ecc_make_key prng 32] private_key public_key
		set msg	[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda]
		# Test both with and without explicit PRNG
		set sig1 [tomcrypt::ecc_sign $private_key $msg]
		set sig2 [tomcrypt::ecc_sign $private_key $msg prng]
		list \
			[tomcrypt::ecc_verify $sig1 $msg $public_key] \
			[tomcrypt::ecc_verify $sig2 $msg $public_key]
	}
} -cleanup {
	if {[info exists child]} {
		interp delete $child
	}
	unset -nocomplain child
} -result {1 1}
#>>>
test ecc-30.10 {ecc_sign: verify signature different for different messages} -setup { #<<<
	tomcrypt::prng create prng fortuna
	lassign [tomcrypt::ecc_make_key prng 32] private_key public_key
	set msg1	[binary decode hex 41091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda]
	set msg2	[binary decode hex 51091b1b32c6cd42f06b36f72801e01915bd99115f120c119ef7b781f7140dda]
} -body {
	# Test both with and without explicit PRNG
	set sig1	[tomcrypt::ecc_sign $private_key $msg1]
	set sig2	[tomcrypt::ecc_sign $private_key $msg2 prng]
	expr {$sig1 ne $sig2}
} -cleanup {
	rename prng {}
	unset -nocomplain private_key public_key msg1 msg2 sig1 sig2
} -result 1
#>>>

# cleanup
::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
